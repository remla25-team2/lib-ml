name: Release lib-ml
on:
  push:
    tags:
      - 'v*.*'       # Run for vX.Y or vX.Y.Z tags
    branches:
      - main         # Run for main branch (will create pre-releases)
  pull_request:
    branches:
      - main         # Run tests on PRs to main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required to get all tags for versioning


      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install deps & NLTK data
        run: |
          python -m pip install --upgrade pip
          pip install git+https://github.com/remla25-team2/lib-version@v0.2.2
          pip install -e .[dev] build
          python - <<'PY'
          import nltk, ssl
          try:
              ssl._create_default_https_context = ssl._create_unverified_context
          except AttributeError:
              pass
          nltk.download("stopwords", quiet=True)
          PY

      - name: Run tests
        run: pytest -q

      - name: Build distribution files
        run: python -m build

      - uses: actions/upload-artifact@v4
        with:
          name: lib-ml-dist
          path: dist/*

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.whl
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Set build metadata with lib-version
        id: build_meta
        run: |
          # Get metadata and set as environment variables
          lib-version version metadata >> $GITHUB_ENV
          
          # Also display for logging
          echo "Build metadata from lib-version:"
          lib-version version metadata      
      # For pre-releases from main and tags - using lib-version timestamp
      - name: Get pre-release version with lib-version
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        id: pre_version
        run: |
          # Get the next version based on the latest tag
          NEXT_VERSION=$(lib-version version next)
          PRE_VERSION="${NEXT_VERSION}-pre-${{ env.timestamp }}"
          echo "pre_version=$PRE_VERSION" >> $GITHUB_OUTPUT

      # Create Pre-release for builds from main or after tags
      - name: Create Pre-release
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          prerelease: true
          tag_name: v${{ steps.pre_version.outputs.pre_version }}
          name: Pre-release ${{ steps.pre_version.outputs.pre_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
