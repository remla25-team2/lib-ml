name: Release lib-ml

on:
  push:
    tags: ["v*.*", "v*.*.*"]  # Trigger on vX.Y or vX.Y.Z tags
    branches:
      - main                  # Pre-releases from main
  pull_request:
    branches:
      - main

jobs:
  build-test-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev] build
          pip install git+https://github.com/remla25-team2/lib-version@v0.2.3

      - name: Download NLTK data
        run: |
          python - <<'PY'
          import nltk, ssl
          try:
              ssl._create_default_https_context = ssl._create_unverified_context
          except AttributeError:
              pass
          nltk.download("stopwords", quiet=True)
          PY

      - name: Run tests
        run: pytest -q

      # Set build metadata with lib-version
      - name: Set build metadata with lib-version
        id: build_meta
        run: |
          lib-version version metadata >> $GITHUB_ENV
          echo "Build metadata from lib-version:"
          lib-version version metadata

      # For tagged releases
      - name: Get release version with lib-version
        if: startsWith(github.ref, 'refs/tags/')
        id: get_version
        run: |
          VERSION=$(lib-version version current)
          echo "__version__ = \"$VERSION\"" > lib_ml/_version.py
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION"

      # For main branch (pre-release)
      - name: Get pre-release version with lib-version
        if: github.ref == 'refs/heads/main'
        id: pre_version
        run: |
          NEXT_VERSION=$(lib-version version next)
          PRE_VERSION="${NEXT_VERSION}-pre-${{ env.timestamp }}"
          echo "__version__ = \"$PRE_VERSION\"" > lib_ml/_version.py
          echo "pre_version=$PRE_VERSION" >> $GITHUB_ENV
          echo "Pre-release version: $PRE_VERSION"

      - name: Build distribution files
        run: python -m build

      - uses: actions/upload-artifact@v4
        with:
          name: lib-ml-dist
          path: dist/*

      # Upload to GitHub Release for tagged releases
      - name: Upload to GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: v${{ env.version }}
          name: Release ${{ env.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload pre-release for main branch
      - name: Create Pre-release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          prerelease: true
          tag_name: v${{ env.pre_version }}
          name: Pre-release ${{ env.pre_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
